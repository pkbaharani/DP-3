/*

Time Complexity: O(n2)
Ran successfully on Leetcode.

Approach:

firt identify the repeating problems.

From top to bottom, we need minimum cost to get to the bottom.

for minimum cost from a particular row, we should know what is the minimum cost to reach that particular row.
for this for each index to be a interim destination , what all indexes can be the source.
out of those index, add the minimum of source to that particular index to calculate the cost.


*/


class Solution {
    public int minFallingPathSum(int[][] A) {
        
        
        int temp1=0;
        int temp2=0;
        int temp3=0;
        
        for(int i=1; i< A.length; i++)
        {
            for(int j=0;j<A.length;j++)
            {
                int temp4=0;
                temp1= A[i-1][j];
                if(j==0)
                {
                    temp2= A[i-1][j+1];
                    temp4=Math.min(temp2,A[i-1][j]);
                    
                }
                else if(j==A.length-1)
                {
                    temp3= A[i-1][j-1];
                    temp4=Math.min(temp3,A[i-1][j]);
                }
                else{
                    temp4=Math.min(A[i-1][j-1],A[i-1][j]);
                    temp4=Math.min(temp4,A[i-1][j+1]);
                }
                
                A[i][j]+=temp4;
                }
        }
        
 //       return Math.min(Math.min(A[A.length-1][]))
        int min=Integer.MAX_VALUE;
        for(int i=0;i<A.length;i++)
        {
            
            if(min>A[A.length-1][i])
            {
                min=A[A.length-1][i];
            }
            
        }
        return min;
    }
}
